/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.equisoft.connect.sdk.models

import com.equisoft.connect.sdk.models.LegacyContactContactPayloadItemAllOf
import com.equisoft.connect.sdk.models.LegacycontactContact

import com.squareup.moshi.Json

/**
 * 
 *
 * @param id Unique id
 * @param uuid Contact UUID
 * @param typeContact type of the contact
 * @param indOrg type INDIVIDUAL OR ORGANIZATION
 * @param displayName display name of the contact
 * @param firstName first name of the contact
 * @param nickname nickname of the contact
 * @param middleName middle name of the contact
 * @param lastName last name of the contact
 * @param corporationName first line of corporation name (Organization)
 * @param corporationNameLine2 second line of corporation name (Organization)
 * @param rank rank of the contact. (Industrial Alliance only)
 * @param externalKey external key
 * @param externalKeyType External key type
 * @param gender Gender of the contact. Either MALE or FEMALE
 * @param sin sin of the contact
 * @param birthdate birthdate of the contact
 * @param smoker Smoker status of the contact.
 * @param smokerSince Smoker status since date.
 * @param phoneHome phone number of the contact at home
 * @param phoneHomeSecond second phone number of the contact at home
 * @param phoneAssistant assistant phone number of the contact
 * @param phoneOffice office phone number of the contact
 * @param phoneOfficeSecond second office phone number of the contact
 * @param phoneCell cell phone number of the contact
 * @param phonePager Pager phone number of the contact
 * @param phoneFax fax phone number of the contact
 * @param mainEmail main email of the contact
 * @param emailPersonal personal email of the contact
 * @param webSite Web Site URL. This represent the main website for the contact.
 * @param emailBusiness business email of the contact
 * @param emailOther business email of the contact
 * @param notes notes of the contact
 * @param peculiarity peculiarity of the contact
 * @param endFinancialYear End of the financial year (for organization)
 * @param language Language
 * @param active Active (boolean)
 * @param publish Publish (boolean)
 * @param title Title
 * @param suffix Suffix
 * @param civility Civility
 * @param civilityId Civility id
 * @param personAddressed Person Addressed (Correspondance)
 * @param organizationLine1 Organization name (Correspondance)
 * @param organizationLine2 Organization name - second line (Correspondance)
 * @param department Department (Correspondance)
 * @param customerNumber Customer Number
 * @param birthPlace Birth Place
 * @param nationality Nationality
 * @param orgDateCreated 
 * @param orgDateClosed 
 * @param dateEndFinancialYear 
 * @param orgIdNo 
 * @param orgFedNo 
 * @param orgProvNo 
 * @param orgStateId 
 * @param orgEin 
 */

data class LegacycontactContactPayloadItem (

    /* Unique id */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Contact UUID */
    @Json(name = "uuid")
    val uuid: kotlin.String? = null,

    /* type of the contact */
    @Json(name = "typeContact")
    val typeContact: kotlin.String? = null,

    /* type INDIVIDUAL OR ORGANIZATION */
    @Json(name = "indOrg")
    val indOrg: kotlin.String? = null,

    /* display name of the contact */
    @Json(name = "displayName")
    val displayName: kotlin.String? = null,

    /* first name of the contact */
    @Json(name = "firstName")
    val firstName: kotlin.String? = null,

    /* nickname of the contact */
    @Json(name = "nickname")
    val nickname: kotlin.String? = null,

    /* middle name of the contact */
    @Json(name = "middleName")
    val middleName: kotlin.String? = null,

    /* last name of the contact */
    @Json(name = "lastName")
    val lastName: kotlin.String? = null,

    /* first line of corporation name (Organization) */
    @Json(name = "corporationName")
    val corporationName: kotlin.String? = null,

    /* second line of corporation name (Organization) */
    @Json(name = "corporationNameLine2")
    val corporationNameLine2: kotlin.String? = null,

    /* rank of the contact. (Industrial Alliance only) */
    @Json(name = "rank")
    val rank: kotlin.String? = null,

    /* external key */
    @Json(name = "externalKey")
    val externalKey: kotlin.String? = null,

    /* External key type */
    @Json(name = "externalKeyType")
    val externalKeyType: kotlin.String? = null,

    /* Gender of the contact. Either MALE or FEMALE */
    @Json(name = "gender")
    val gender: kotlin.String? = null,

    /* sin of the contact */
    @Json(name = "sin")
    val sin: kotlin.String? = null,

    /* birthdate of the contact */
    @Json(name = "birthdate")
    val birthdate: kotlin.String? = null,

    /* Smoker status of the contact. */
    @Json(name = "smoker")
    val smoker: kotlin.String? = null,

    /* Smoker status since date. */
    @Json(name = "smokerSince")
    val smokerSince: kotlin.String? = null,

    /* phone number of the contact at home */
    @Json(name = "phoneHome")
    val phoneHome: kotlin.String? = null,

    /* second phone number of the contact at home */
    @Json(name = "phoneHomeSecond")
    val phoneHomeSecond: kotlin.String? = null,

    /* assistant phone number of the contact */
    @Json(name = "phoneAssistant")
    val phoneAssistant: kotlin.String? = null,

    /* office phone number of the contact */
    @Json(name = "phoneOffice")
    val phoneOffice: kotlin.String? = null,

    /* second office phone number of the contact */
    @Json(name = "phoneOfficeSecond")
    val phoneOfficeSecond: kotlin.String? = null,

    /* cell phone number of the contact */
    @Json(name = "phoneCell")
    val phoneCell: kotlin.String? = null,

    /* Pager phone number of the contact */
    @Json(name = "phonePager")
    val phonePager: kotlin.String? = null,

    /* fax phone number of the contact */
    @Json(name = "phoneFax")
    val phoneFax: kotlin.String? = null,

    /* main email of the contact */
    @Json(name = "mainEmail")
    val mainEmail: kotlin.String? = null,

    /* personal email of the contact */
    @Json(name = "emailPersonal")
    val emailPersonal: kotlin.String? = null,

    /* Web Site URL. This represent the main website for the contact. */
    @Json(name = "webSite")
    val webSite: kotlin.String? = null,

    /* business email of the contact */
    @Json(name = "emailBusiness")
    val emailBusiness: kotlin.String? = null,

    /* business email of the contact */
    @Json(name = "emailOther")
    val emailOther: kotlin.String? = null,

    /* notes of the contact */
    @Json(name = "notes")
    val notes: kotlin.String? = null,

    /* peculiarity of the contact */
    @Json(name = "peculiarity")
    val peculiarity: kotlin.String? = null,

    /* End of the financial year (for organization) */
    @Json(name = "endFinancialYear")
    val endFinancialYear: kotlin.String? = null,

    /* Language */
    @Json(name = "language")
    val language: kotlin.String? = null,

    /* Active (boolean) */
    @Json(name = "active")
    val active: kotlin.String? = null,

    /* Publish (boolean) */
    @Json(name = "publish")
    val publish: kotlin.String? = null,

    /* Title */
    @Json(name = "title")
    val title: kotlin.String? = null,

    /* Suffix */
    @Json(name = "suffix")
    val suffix: kotlin.String? = null,

    /* Civility */
    @Json(name = "civility")
    val civility: kotlin.String? = null,

    /* Civility id */
    @Json(name = "civilityId")
    val civilityId: kotlin.Int? = null,

    /* Person Addressed (Correspondance) */
    @Json(name = "personAddressed")
    val personAddressed: kotlin.String? = null,

    /* Organization name (Correspondance) */
    @Json(name = "organizationLine1")
    val organizationLine1: kotlin.String? = null,

    /* Organization name - second line (Correspondance) */
    @Json(name = "organizationLine2")
    val organizationLine2: kotlin.String? = null,

    /* Department (Correspondance) */
    @Json(name = "department")
    val department: kotlin.String? = null,

    /* Customer Number */
    @Json(name = "customerNumber")
    val customerNumber: kotlin.String? = null,

    /* Birth Place */
    @Json(name = "birthPlace")
    val birthPlace: kotlin.String? = null,

    /* Nationality */
    @Json(name = "nationality")
    val nationality: kotlin.String? = null,

    @Json(name = "orgDateCreated")
    val orgDateCreated: kotlin.String? = null,

    @Json(name = "orgDateClosed")
    val orgDateClosed: kotlin.String? = null,

    @Json(name = "dateEndFinancialYear")
    val dateEndFinancialYear: kotlin.String? = null,

    @Json(name = "orgIdNo")
    val orgIdNo: kotlin.String? = null,

    @Json(name = "orgFedNo")
    val orgFedNo: kotlin.String? = null,

    @Json(name = "orgProvNo")
    val orgProvNo: kotlin.String? = null,

    @Json(name = "orgStateId")
    val orgStateId: kotlin.String? = null,

    @Json(name = "orgEin")
    val orgEin: kotlin.String? = null

)

