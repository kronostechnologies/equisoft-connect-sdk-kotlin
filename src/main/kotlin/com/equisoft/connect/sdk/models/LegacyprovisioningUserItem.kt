/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.equisoft.connect.sdk.models

import com.equisoft.connect.sdk.models.LegacycontactAddress
import com.equisoft.connect.sdk.models.LegacyprovisioningGroupItem
import com.equisoft.connect.sdk.models.LegacyprovisioningUserIdentifier

import com.squareup.moshi.Json

/**
 * 
 *
 * @param orgId User organization id
 * @param uuid User globaly unique identifier
 * @param userId User unique identifier
 * @param displayName User display name
 * @param firstName First name
 * @param lastName Last name
 * @param initials Initials
 * @param email Email address used for login
 * @param role User role. Accepts USER or ADMIN
 * @param lang User language. Organisation default lang will be used if not provided. Accepts FR or EN.
 * @param concurrentAccess Number of allowed concurrent accesses with this user. Default 1.
 * @param active User is active or not (true or false)
 * @param locked User is locked or not (true or false)
 * @param enableMobile Enable Mobile version. Accepts true or false. Default false
 * @param gender Gender of this user. Accepts M or F.
 * @param phoneWork Work phone number of this user
 * @param phoneWorkExtension Extension of work phone number of this user.
 * @param phoneHome Home phone number of this user.
 * @param phoneCell Cellphone number of this user.
 * @param phoneFax Fax phone number of this user.
 * @param address Address of this user.
 * @param groups Groups the user is a member of.
 * @param externalIdentifiers List of identifier to uniquely identify the user. (Ex: Extranet2 or domain userId)
 * @param allowDelegation Allow the user to delegate access to his data Accepts true or false.
 * @param deletable Can the user be deleted Accepts true or false.
 */

data class LegacyprovisioningUserItem (

    /* User organization id */
    @Json(name = "orgId")
    val orgId: kotlin.String? = null,

    /* User globaly unique identifier */
    @Json(name = "uuid")
    val uuid: kotlin.String? = null,

    /* User unique identifier */
    @Json(name = "userId")
    val userId: kotlin.String? = null,

    /* User display name */
    @Json(name = "displayName")
    val displayName: kotlin.String? = null,

    /* First name */
    @Json(name = "firstName")
    val firstName: kotlin.String? = null,

    /* Last name */
    @Json(name = "lastName")
    val lastName: kotlin.String? = null,

    /* Initials */
    @Json(name = "initials")
    val initials: kotlin.String? = null,

    /* Email address used for login */
    @Json(name = "email")
    val email: kotlin.String? = null,

    /* User role. Accepts USER or ADMIN */
    @Json(name = "role")
    val role: kotlin.String? = null,

    /* User language. Organisation default lang will be used if not provided. Accepts FR or EN. */
    @Json(name = "lang")
    val lang: kotlin.String? = null,

    /* Number of allowed concurrent accesses with this user. Default 1. */
    @Json(name = "concurrentAccess")
    val concurrentAccess: kotlin.Int? = null,

    /* User is active or not (true or false) */
    @Json(name = "active")
    val active: kotlin.String? = null,

    /* User is locked or not (true or false) */
    @Json(name = "locked")
    val locked: kotlin.String? = null,

    /* Enable Mobile version. Accepts true or false. Default false */
    @Json(name = "enableMobile")
    val enableMobile: kotlin.String? = null,

    /* Gender of this user. Accepts M or F. */
    @Json(name = "gender")
    val gender: kotlin.String? = null,

    /* Work phone number of this user */
    @Json(name = "phoneWork")
    val phoneWork: kotlin.String? = null,

    /* Extension of work phone number of this user. */
    @Json(name = "phoneWorkExtension")
    val phoneWorkExtension: kotlin.String? = null,

    /* Home phone number of this user. */
    @Json(name = "phoneHome")
    val phoneHome: kotlin.String? = null,

    /* Cellphone number of this user. */
    @Json(name = "phoneCell")
    val phoneCell: kotlin.String? = null,

    /* Fax phone number of this user. */
    @Json(name = "phoneFax")
    val phoneFax: kotlin.String? = null,

    /* Address of this user. */
    @Json(name = "address")
    val address: kotlin.collections.List<LegacycontactAddress>? = null,

    /* Groups the user is a member of. */
    @Json(name = "groups")
    val groups: kotlin.collections.List<LegacyprovisioningGroupItem>? = null,

    /* List of identifier to uniquely identify the user. (Ex: Extranet2 or domain userId) */
    @Json(name = "externalIdentifiers")
    val externalIdentifiers: kotlin.collections.List<LegacyprovisioningUserIdentifier>? = null,

    /* Allow the user to delegate access to his data Accepts true or false. */
    @Json(name = "allowDelegation")
    val allowDelegation: kotlin.String? = null,

    /* Can the user be deleted Accepts true or false. */
    @Json(name = "deletable")
    val deletable: kotlin.String? = null

)

