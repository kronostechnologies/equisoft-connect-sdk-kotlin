/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.equisoft.connect.sdk

import java.io.IOException
import okhttp3.OkHttpClient

import com.equisoft.connect.sdk.models.DatabasesListDatabasesResponse
import com.equisoft.connect.sdk.models.ErrorResponse
import com.equisoft.connect.sdk.models.UsersListUsersResponse
import com.equisoft.connect.sdk.models.UsersUpdateUserPayload
import com.equisoft.connect.sdk.models.UsersUser

import com.squareup.moshi.Json

import com.equisoft.connect.sdk.infrastructure.ApiClient
import com.equisoft.connect.sdk.infrastructure.ApiResponse
import com.equisoft.connect.sdk.infrastructure.ClientException
import com.equisoft.connect.sdk.infrastructure.ClientError
import com.equisoft.connect.sdk.infrastructure.ServerException
import com.equisoft.connect.sdk.infrastructure.ServerError
import com.equisoft.connect.sdk.infrastructure.MultiValueMap
import com.equisoft.connect.sdk.infrastructure.PartConfig
import com.equisoft.connect.sdk.infrastructure.RequestConfig
import com.equisoft.connect.sdk.infrastructure.RequestMethod
import com.equisoft.connect.sdk.infrastructure.ResponseType
import com.equisoft.connect.sdk.infrastructure.Success
import com.equisoft.connect.sdk.infrastructure.toMultiValue

class DatabasesApi(
    basePath: kotlin.String = defaultBasePath,
    accessToken: String? = null,
    client: OkHttpClient = ApiClient.defaultClient
) : ApiClient(basePath, accessToken, client) {

    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param uuid 
     * @param id 
     * @return UsersUser
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUser(uuid: kotlin.String, id: kotlin.Int) : UsersUser {
        val localVarResponse = getUserWithHttpInfo(uuid = uuid, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersUser
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param uuid 
     * @param id 
     * @return ApiResponse<UsersUser?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserWithHttpInfo(uuid: kotlin.String, id: kotlin.Int) : ApiResponse<UsersUser?> {
        val localVariableConfig = getUserRequestConfig(uuid = uuid, id = id)

        return request<Unit, UsersUser>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUser
     *
     * @param uuid 
     * @param id 
     * @return RequestConfig
     */
    fun getUserRequestConfig(uuid: kotlin.String, id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/databases/{uuid}/users/{id}".replace("{"+"uuid"+"}", "$uuid").replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param organizationUuid  (optional)
     * @param databaseName  (optional)
     * @return DatabasesListDatabasesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listDatabases(organizationUuid: kotlin.String? = null, databaseName: kotlin.String? = null) : DatabasesListDatabasesResponse {
        val localVarResponse = listDatabasesWithHttpInfo(organizationUuid = organizationUuid, databaseName = databaseName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DatabasesListDatabasesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param organizationUuid  (optional)
     * @param databaseName  (optional)
     * @return ApiResponse<DatabasesListDatabasesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listDatabasesWithHttpInfo(organizationUuid: kotlin.String?, databaseName: kotlin.String?) : ApiResponse<DatabasesListDatabasesResponse?> {
        val localVariableConfig = listDatabasesRequestConfig(organizationUuid = organizationUuid, databaseName = databaseName)

        return request<Unit, DatabasesListDatabasesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listDatabases
     *
     * @param organizationUuid  (optional)
     * @param databaseName  (optional)
     * @return RequestConfig
     */
    fun listDatabasesRequestConfig(organizationUuid: kotlin.String?, databaseName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (organizationUuid != null) {
                    put("organizationUuid", listOf(organizationUuid.toString()))
                }
                if (databaseName != null) {
                    put("databaseName", listOf(databaseName.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/databases",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param uuid 
     * @return UsersListUsersResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUsers(uuid: kotlin.String) : UsersListUsersResponse {
        val localVarResponse = listUsersWithHttpInfo(uuid = uuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersListUsersResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param uuid 
     * @return ApiResponse<UsersListUsersResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUsersWithHttpInfo(uuid: kotlin.String) : ApiResponse<UsersListUsersResponse?> {
        val localVariableConfig = listUsersRequestConfig(uuid = uuid)

        return request<Unit, UsersListUsersResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listUsers
     *
     * @param uuid 
     * @return RequestConfig
     */
    fun listUsersRequestConfig(uuid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/databases/{uuid}/users".replace("{"+"uuid"+"}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param uuid 
     * @param id 
     * @param usersUpdateUserPayload 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateUser(uuid: kotlin.String, id: kotlin.Int, usersUpdateUserPayload: UsersUpdateUserPayload) : Unit {
        val localVarResponse = updateUserWithHttpInfo(uuid = uuid, id = id, usersUpdateUserPayload = usersUpdateUserPayload)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param uuid 
     * @param id 
     * @param usersUpdateUserPayload 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateUserWithHttpInfo(uuid: kotlin.String, id: kotlin.Int, usersUpdateUserPayload: UsersUpdateUserPayload) : ApiResponse<Unit?> {
        val localVariableConfig = updateUserRequestConfig(uuid = uuid, id = id, usersUpdateUserPayload = usersUpdateUserPayload)

        return request<UsersUpdateUserPayload, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateUser
     *
     * @param uuid 
     * @param id 
     * @param usersUpdateUserPayload 
     * @return RequestConfig
     */
    fun updateUserRequestConfig(uuid: kotlin.String, id: kotlin.Int, usersUpdateUserPayload: UsersUpdateUserPayload) : RequestConfig<UsersUpdateUserPayload> {
        val localVariableBody = usersUpdateUserPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/crm/api/v1/databases/{uuid}/users/{id}".replace("{"+"uuid"+"}", "$uuid").replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
