/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.equisoft.connect.sdk

import java.io.IOException
import okhttp3.OkHttpClient

import com.equisoft.connect.sdk.models.AdminCredentialPayload
import com.equisoft.connect.sdk.models.AdminCredentialResponse
import com.equisoft.connect.sdk.models.CredentialsResponse
import com.equisoft.connect.sdk.models.ErrorResponse
import com.equisoft.connect.sdk.models.GatewaysListCredentialsResponse
import com.equisoft.connect.sdk.models.GatewaysaccessesCreateAccessResponse
import com.equisoft.connect.sdk.models.GatewaysaccessesCreateEquisoftAnalyzeAccessPayload
import com.equisoft.connect.sdk.models.GatewaysaccessesListGatewayAccessesResponse
import com.equisoft.connect.sdk.models.GatewaysaccessesPatchEquisoftAnalyzeAccessPayload

import com.squareup.moshi.Json

import com.equisoft.connect.sdk.infrastructure.ApiClient
import com.equisoft.connect.sdk.infrastructure.ApiResponse
import com.equisoft.connect.sdk.infrastructure.ClientException
import com.equisoft.connect.sdk.infrastructure.ClientError
import com.equisoft.connect.sdk.infrastructure.ServerException
import com.equisoft.connect.sdk.infrastructure.ServerError
import com.equisoft.connect.sdk.infrastructure.MultiValueMap
import com.equisoft.connect.sdk.infrastructure.PartConfig
import com.equisoft.connect.sdk.infrastructure.RequestConfig
import com.equisoft.connect.sdk.infrastructure.RequestMethod
import com.equisoft.connect.sdk.infrastructure.ResponseType
import com.equisoft.connect.sdk.infrastructure.Success
import com.equisoft.connect.sdk.infrastructure.toMultiValue

class GatewaysApi(
    basePath: kotlin.String = defaultBasePath,
    accessToken: String? = null,
    client: OkHttpClient = ApiClient.defaultClient
) : ApiClient(basePath, accessToken, client) {

    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * Create a user access configuration for Equisoft/analyze gateway
     * @param gatewaysaccessesCreateEquisoftAnalyzeAccessPayload 
     * @return GatewaysaccessesCreateAccessResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createEquisoftAnalyzeAccess(gatewaysaccessesCreateEquisoftAnalyzeAccessPayload: GatewaysaccessesCreateEquisoftAnalyzeAccessPayload) : GatewaysaccessesCreateAccessResponse {
        val localVarResponse = createEquisoftAnalyzeAccessWithHttpInfo(gatewaysaccessesCreateEquisoftAnalyzeAccessPayload = gatewaysaccessesCreateEquisoftAnalyzeAccessPayload)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GatewaysaccessesCreateAccessResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Create a user access configuration for Equisoft/analyze gateway
     * @param gatewaysaccessesCreateEquisoftAnalyzeAccessPayload 
     * @return ApiResponse<GatewaysaccessesCreateAccessResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createEquisoftAnalyzeAccessWithHttpInfo(gatewaysaccessesCreateEquisoftAnalyzeAccessPayload: GatewaysaccessesCreateEquisoftAnalyzeAccessPayload) : ApiResponse<GatewaysaccessesCreateAccessResponse?> {
        val localVariableConfig = createEquisoftAnalyzeAccessRequestConfig(gatewaysaccessesCreateEquisoftAnalyzeAccessPayload = gatewaysaccessesCreateEquisoftAnalyzeAccessPayload)

        return request<GatewaysaccessesCreateEquisoftAnalyzeAccessPayload, GatewaysaccessesCreateAccessResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createEquisoftAnalyzeAccess
     *
     * @param gatewaysaccessesCreateEquisoftAnalyzeAccessPayload 
     * @return RequestConfig
     */
    fun createEquisoftAnalyzeAccessRequestConfig(gatewaysaccessesCreateEquisoftAnalyzeAccessPayload: GatewaysaccessesCreateEquisoftAnalyzeAccessPayload) : RequestConfig<GatewaysaccessesCreateEquisoftAnalyzeAccessPayload> {
        val localVariableBody = gatewaysaccessesCreateEquisoftAnalyzeAccessPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/crm/api/v1/gateways/equisoftAnalyze/accesses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Delete user access configuration for given gateway
     * @param accessId 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteEquisoftAnalyzeAccess(accessId: kotlin.Int) : Unit {
        val localVarResponse = deleteEquisoftAnalyzeAccessWithHttpInfo(accessId = accessId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Delete user access configuration for given gateway
     * @param accessId 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteEquisoftAnalyzeAccessWithHttpInfo(accessId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = deleteEquisoftAnalyzeAccessRequestConfig(accessId = accessId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteEquisoftAnalyzeAccess
     *
     * @param accessId 
     * @return RequestConfig
     */
    fun deleteEquisoftAnalyzeAccessRequestConfig(accessId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/crm/api/v1/gateways/equisoftAnalyze/accesses/{accessId}".replace("{"+"accessId"+"}", "$accessId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param gatewayName 
     * @param authorization Authorization header using the Bearer scheme
     * @param adminCredentialPayload 
     * @return AdminCredentialResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayAdminLogin(gatewayName: kotlin.String, authorization: kotlin.String, adminCredentialPayload: AdminCredentialPayload) : AdminCredentialResponse {
        val localVarResponse = gatewayAdminLoginWithHttpInfo(gatewayName = gatewayName, authorization = authorization, adminCredentialPayload = adminCredentialPayload)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminCredentialResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param gatewayName 
     * @param authorization Authorization header using the Bearer scheme
     * @param adminCredentialPayload 
     * @return ApiResponse<AdminCredentialResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun gatewayAdminLoginWithHttpInfo(gatewayName: kotlin.String, authorization: kotlin.String, adminCredentialPayload: AdminCredentialPayload) : ApiResponse<AdminCredentialResponse?> {
        val localVariableConfig = gatewayAdminLoginRequestConfig(gatewayName = gatewayName, authorization = authorization, adminCredentialPayload = adminCredentialPayload)

        return request<AdminCredentialPayload, AdminCredentialResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation gatewayAdminLogin
     *
     * @param gatewayName 
     * @param authorization Authorization header using the Bearer scheme
     * @param adminCredentialPayload 
     * @return RequestConfig
     */
    fun gatewayAdminLoginRequestConfig(gatewayName: kotlin.String, authorization: kotlin.String, adminCredentialPayload: AdminCredentialPayload) : RequestConfig<AdminCredentialPayload> {
        val localVariableBody = adminCredentialPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/crm/api/v1/gateways/credentials-validation/{gatewayName}/admin-credentials/login".replace("{"+"gatewayName"+"}", "$gatewayName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @return GatewaysListCredentialsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listAssetBookCredentials() : GatewaysListCredentialsResponse {
        val localVarResponse = listAssetBookCredentialsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GatewaysListCredentialsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<GatewaysListCredentialsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listAssetBookCredentialsWithHttpInfo() : ApiResponse<GatewaysListCredentialsResponse?> {
        val localVariableConfig = listAssetBookCredentialsRequestConfig()

        return request<Unit, GatewaysListCredentialsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listAssetBookCredentials
     *
     * @return RequestConfig
     */
    fun listAssetBookCredentialsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/gateways/assetbook/credentials",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param gatewayId 
     * @param status 
     * @param authorization Authorization header using the Bearer scheme
     * @return CredentialsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listCredentials(gatewayId: kotlin.String, status: kotlin.String, authorization: kotlin.String) : CredentialsResponse {
        val localVarResponse = listCredentialsWithHttpInfo(gatewayId = gatewayId, status = status, authorization = authorization)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CredentialsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param gatewayId 
     * @param status 
     * @param authorization Authorization header using the Bearer scheme
     * @return ApiResponse<CredentialsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listCredentialsWithHttpInfo(gatewayId: kotlin.String, status: kotlin.String, authorization: kotlin.String) : ApiResponse<CredentialsResponse?> {
        val localVariableConfig = listCredentialsRequestConfig(gatewayId = gatewayId, status = status, authorization = authorization)

        return request<Unit, CredentialsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listCredentials
     *
     * @param gatewayId 
     * @param status 
     * @param authorization Authorization header using the Bearer scheme
     * @return RequestConfig
     */
    fun listCredentialsRequestConfig(gatewayId: kotlin.String, status: kotlin.String, authorization: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/gateways/credentials-validation/{gatewayId}/credentials/{status}".replace("{"+"gatewayId"+"}", "$gatewayId").replace("{"+"status"+"}", "$status"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * List user accesses configuration for equisoft/analyze gateway
     * @param userUuid  (optional)
     * @return GatewaysaccessesListGatewayAccessesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listEquisoftAnalyzeAccesses(userUuid: kotlin.String? = null) : GatewaysaccessesListGatewayAccessesResponse {
        val localVarResponse = listEquisoftAnalyzeAccessesWithHttpInfo(userUuid = userUuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GatewaysaccessesListGatewayAccessesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * List user accesses configuration for equisoft/analyze gateway
     * @param userUuid  (optional)
     * @return ApiResponse<GatewaysaccessesListGatewayAccessesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listEquisoftAnalyzeAccessesWithHttpInfo(userUuid: kotlin.String?) : ApiResponse<GatewaysaccessesListGatewayAccessesResponse?> {
        val localVariableConfig = listEquisoftAnalyzeAccessesRequestConfig(userUuid = userUuid)

        return request<Unit, GatewaysaccessesListGatewayAccessesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listEquisoftAnalyzeAccesses
     *
     * @param userUuid  (optional)
     * @return RequestConfig
     */
    fun listEquisoftAnalyzeAccessesRequestConfig(userUuid: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (userUuid != null) {
                    put("userUuid", listOf(userUuid.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/gateways/equisoftAnalyze/accesses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param gatewayName 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listGatewayConfigurations(gatewayName: kotlin.String) : Unit {
        val localVarResponse = listGatewayConfigurationsWithHttpInfo(gatewayName = gatewayName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param gatewayName 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun listGatewayConfigurationsWithHttpInfo(gatewayName: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = listGatewayConfigurationsRequestConfig(gatewayName = gatewayName)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listGatewayConfigurations
     *
     * @param gatewayName 
     * @return RequestConfig
     */
    fun listGatewayConfigurationsRequestConfig(gatewayName: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/gateways/generic/{gatewayName}/configuration".replace("{"+"gatewayName"+"}", "$gatewayName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param gatewayName 
     * @param includeSsn Include the list of SSN for each credentials. Defaults to false (optional)
     * @return GatewaysListCredentialsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listGenericCredentials(gatewayName: kotlin.String, includeSsn: kotlin.Boolean? = null) : GatewaysListCredentialsResponse {
        val localVarResponse = listGenericCredentialsWithHttpInfo(gatewayName = gatewayName, includeSsn = includeSsn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GatewaysListCredentialsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param gatewayName 
     * @param includeSsn Include the list of SSN for each credentials. Defaults to false (optional)
     * @return ApiResponse<GatewaysListCredentialsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listGenericCredentialsWithHttpInfo(gatewayName: kotlin.String, includeSsn: kotlin.Boolean?) : ApiResponse<GatewaysListCredentialsResponse?> {
        val localVariableConfig = listGenericCredentialsRequestConfig(gatewayName = gatewayName, includeSsn = includeSsn)

        return request<Unit, GatewaysListCredentialsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listGenericCredentials
     *
     * @param gatewayName 
     * @param includeSsn Include the list of SSN for each credentials. Defaults to false (optional)
     * @return RequestConfig
     */
    fun listGenericCredentialsRequestConfig(gatewayName: kotlin.String, includeSsn: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (includeSsn != null) {
                    put("includeSsn", listOf(includeSsn.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/gateways/generic/{gatewayName}/credentials".replace("{"+"gatewayName"+"}", "$gatewayName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Update user access configuration for Equisoft/analyze gateway
     * @param accessId 
     * @param gatewaysaccessesPatchEquisoftAnalyzeAccessPayload 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun patchEquisoftAnalyzeAccess(accessId: kotlin.Int, gatewaysaccessesPatchEquisoftAnalyzeAccessPayload: GatewaysaccessesPatchEquisoftAnalyzeAccessPayload) : Unit {
        val localVarResponse = patchEquisoftAnalyzeAccessWithHttpInfo(accessId = accessId, gatewaysaccessesPatchEquisoftAnalyzeAccessPayload = gatewaysaccessesPatchEquisoftAnalyzeAccessPayload)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Update user access configuration for Equisoft/analyze gateway
     * @param accessId 
     * @param gatewaysaccessesPatchEquisoftAnalyzeAccessPayload 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun patchEquisoftAnalyzeAccessWithHttpInfo(accessId: kotlin.Int, gatewaysaccessesPatchEquisoftAnalyzeAccessPayload: GatewaysaccessesPatchEquisoftAnalyzeAccessPayload) : ApiResponse<Unit?> {
        val localVariableConfig = patchEquisoftAnalyzeAccessRequestConfig(accessId = accessId, gatewaysaccessesPatchEquisoftAnalyzeAccessPayload = gatewaysaccessesPatchEquisoftAnalyzeAccessPayload)

        return request<GatewaysaccessesPatchEquisoftAnalyzeAccessPayload, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchEquisoftAnalyzeAccess
     *
     * @param accessId 
     * @param gatewaysaccessesPatchEquisoftAnalyzeAccessPayload 
     * @return RequestConfig
     */
    fun patchEquisoftAnalyzeAccessRequestConfig(accessId: kotlin.Int, gatewaysaccessesPatchEquisoftAnalyzeAccessPayload: GatewaysaccessesPatchEquisoftAnalyzeAccessPayload) : RequestConfig<GatewaysaccessesPatchEquisoftAnalyzeAccessPayload> {
        val localVariableBody = gatewaysaccessesPatchEquisoftAnalyzeAccessPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/crm/api/v1/gateways/equisoftAnalyze/accesses/{accessId}".replace("{"+"accessId"+"}", "$accessId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param gatewayId 
     * @param status 
     * @param authorization Authorization header using the Bearer scheme
     * @param credentialIds Many ids can be passed to this argument separated by coma. Ex: &#39;?credentialIds&#x3D;1,2,3&#39;. (optional)
     * @return CredentialsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateCredentials(gatewayId: kotlin.String, status: kotlin.String, authorization: kotlin.String, credentialIds: kotlin.collections.List<kotlin.Int>? = null) : CredentialsResponse {
        val localVarResponse = updateCredentialsWithHttpInfo(gatewayId = gatewayId, status = status, authorization = authorization, credentialIds = credentialIds)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CredentialsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param gatewayId 
     * @param status 
     * @param authorization Authorization header using the Bearer scheme
     * @param credentialIds Many ids can be passed to this argument separated by coma. Ex: &#39;?credentialIds&#x3D;1,2,3&#39;. (optional)
     * @return ApiResponse<CredentialsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateCredentialsWithHttpInfo(gatewayId: kotlin.String, status: kotlin.String, authorization: kotlin.String, credentialIds: kotlin.collections.List<kotlin.Int>?) : ApiResponse<CredentialsResponse?> {
        val localVariableConfig = updateCredentialsRequestConfig(gatewayId = gatewayId, status = status, authorization = authorization, credentialIds = credentialIds)

        return request<Unit, CredentialsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateCredentials
     *
     * @param gatewayId 
     * @param status 
     * @param authorization Authorization header using the Bearer scheme
     * @param credentialIds Many ids can be passed to this argument separated by coma. Ex: &#39;?credentialIds&#x3D;1,2,3&#39;. (optional)
     * @return RequestConfig
     */
    fun updateCredentialsRequestConfig(gatewayId: kotlin.String, status: kotlin.String, authorization: kotlin.String, credentialIds: kotlin.collections.List<kotlin.Int>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (credentialIds != null) {
                    put("credentialIds", toMultiValue(credentialIds.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/crm/api/v1/gateways/credentials-validation/{gatewayId}/credentials/{status}".replace("{"+"gatewayId"+"}", "$gatewayId").replace("{"+"status"+"}", "$status"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
