/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.equisoft.connect.sdk

import java.io.IOException
import okhttp3.OkHttpClient

import com.equisoft.connect.sdk.models.DsfCreateOrUpdateFinancialCenterResponse
import com.equisoft.connect.sdk.models.DsfFinancialCenter
import com.equisoft.connect.sdk.models.DsfFinancialCenterPayload
import com.equisoft.connect.sdk.models.DsfListFinancialCenterResponse
import com.equisoft.connect.sdk.models.ErrorResponse

import com.squareup.moshi.Json

import com.equisoft.connect.sdk.infrastructure.ApiClient
import com.equisoft.connect.sdk.infrastructure.ApiResponse
import com.equisoft.connect.sdk.infrastructure.ClientException
import com.equisoft.connect.sdk.infrastructure.ClientError
import com.equisoft.connect.sdk.infrastructure.ServerException
import com.equisoft.connect.sdk.infrastructure.ServerError
import com.equisoft.connect.sdk.infrastructure.MultiValueMap
import com.equisoft.connect.sdk.infrastructure.PartConfig
import com.equisoft.connect.sdk.infrastructure.RequestConfig
import com.equisoft.connect.sdk.infrastructure.RequestMethod
import com.equisoft.connect.sdk.infrastructure.ResponseType
import com.equisoft.connect.sdk.infrastructure.Success
import com.equisoft.connect.sdk.infrastructure.toMultiValue

class DSFApi(
    basePath: kotlin.String = defaultBasePath,
    accessToken: String? = null,
    client: OkHttpClient = ApiClient.defaultClient
) : ApiClient(basePath, accessToken) {

    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param dsfFinancialCenterPayload 
     * @return DsfCreateOrUpdateFinancialCenterResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createDsfFinancialCenter(dsfFinancialCenterPayload: DsfFinancialCenterPayload) : DsfCreateOrUpdateFinancialCenterResponse {
        val localVarResponse = createDsfFinancialCenterWithHttpInfo(dsfFinancialCenterPayload = dsfFinancialCenterPayload)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DsfCreateOrUpdateFinancialCenterResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dsfFinancialCenterPayload 
     * @return ApiResponse<DsfCreateOrUpdateFinancialCenterResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createDsfFinancialCenterWithHttpInfo(dsfFinancialCenterPayload: DsfFinancialCenterPayload) : ApiResponse<DsfCreateOrUpdateFinancialCenterResponse?> {
        val localVariableConfig = createDsfFinancialCenterRequestConfig(dsfFinancialCenterPayload = dsfFinancialCenterPayload)

        return request<DsfFinancialCenterPayload, DsfCreateOrUpdateFinancialCenterResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createDsfFinancialCenter
     *
     * @param dsfFinancialCenterPayload 
     * @return RequestConfig
     */
    fun createDsfFinancialCenterRequestConfig(dsfFinancialCenterPayload: DsfFinancialCenterPayload) : RequestConfig<DsfFinancialCenterPayload> {
        val localVariableBody = dsfFinancialCenterPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/crm/api/v1/dsf/financialCenters",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param financialCenterId 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteDsfFinancialCenter(financialCenterId: kotlin.Int) : Unit {
        val localVarResponse = deleteDsfFinancialCenterWithHttpInfo(financialCenterId = financialCenterId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param financialCenterId 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteDsfFinancialCenterWithHttpInfo(financialCenterId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = deleteDsfFinancialCenterRequestConfig(financialCenterId = financialCenterId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteDsfFinancialCenter
     *
     * @param financialCenterId 
     * @return RequestConfig
     */
    fun deleteDsfFinancialCenterRequestConfig(financialCenterId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/crm/api/v1/dsf/financialCenters/{financialCenterId}".replace("{"+"financialCenterId"+"}", "$financialCenterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param financialCenterId 
     * @return DsfFinancialCenter
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDsfFinancialCenters(financialCenterId: kotlin.Int) : DsfFinancialCenter {
        val localVarResponse = getDsfFinancialCentersWithHttpInfo(financialCenterId = financialCenterId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DsfFinancialCenter
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param financialCenterId 
     * @return ApiResponse<DsfFinancialCenter?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDsfFinancialCentersWithHttpInfo(financialCenterId: kotlin.Int) : ApiResponse<DsfFinancialCenter?> {
        val localVariableConfig = getDsfFinancialCentersRequestConfig(financialCenterId = financialCenterId)

        return request<Unit, DsfFinancialCenter>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDsfFinancialCenters
     *
     * @param financialCenterId 
     * @return RequestConfig
     */
    fun getDsfFinancialCentersRequestConfig(financialCenterId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/dsf/financialCenters/{financialCenterId}".replace("{"+"financialCenterId"+"}", "$financialCenterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @return DsfListFinancialCenterResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listDsfFinancialCenters() : DsfListFinancialCenterResponse {
        val localVarResponse = listDsfFinancialCentersWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DsfListFinancialCenterResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<DsfListFinancialCenterResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listDsfFinancialCentersWithHttpInfo() : ApiResponse<DsfListFinancialCenterResponse?> {
        val localVariableConfig = listDsfFinancialCentersRequestConfig()

        return request<Unit, DsfListFinancialCenterResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listDsfFinancialCenters
     *
     * @return RequestConfig
     */
    fun listDsfFinancialCentersRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/dsf/financialCenters",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param financialCenterId 
     * @param dsfFinancialCenterPayload 
     * @return DsfCreateOrUpdateFinancialCenterResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateDsfFinancialCenter(financialCenterId: kotlin.Int, dsfFinancialCenterPayload: DsfFinancialCenterPayload) : DsfCreateOrUpdateFinancialCenterResponse {
        val localVarResponse = updateDsfFinancialCenterWithHttpInfo(financialCenterId = financialCenterId, dsfFinancialCenterPayload = dsfFinancialCenterPayload)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DsfCreateOrUpdateFinancialCenterResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param financialCenterId 
     * @param dsfFinancialCenterPayload 
     * @return ApiResponse<DsfCreateOrUpdateFinancialCenterResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateDsfFinancialCenterWithHttpInfo(financialCenterId: kotlin.Int, dsfFinancialCenterPayload: DsfFinancialCenterPayload) : ApiResponse<DsfCreateOrUpdateFinancialCenterResponse?> {
        val localVariableConfig = updateDsfFinancialCenterRequestConfig(financialCenterId = financialCenterId, dsfFinancialCenterPayload = dsfFinancialCenterPayload)

        return request<DsfFinancialCenterPayload, DsfCreateOrUpdateFinancialCenterResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateDsfFinancialCenter
     *
     * @param financialCenterId 
     * @param dsfFinancialCenterPayload 
     * @return RequestConfig
     */
    fun updateDsfFinancialCenterRequestConfig(financialCenterId: kotlin.Int, dsfFinancialCenterPayload: DsfFinancialCenterPayload) : RequestConfig<DsfFinancialCenterPayload> {
        val localVariableBody = dsfFinancialCenterPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/crm/api/v1/dsf/financialCenters/{financialCenterId}".replace("{"+"financialCenterId"+"}", "$financialCenterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
