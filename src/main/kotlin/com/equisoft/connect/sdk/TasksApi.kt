/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.equisoft.connect.sdk

import java.io.IOException
import okhttp3.OkHttpClient

import com.equisoft.connect.sdk.models.ErrorResponse
import com.equisoft.connect.sdk.models.InternalNotesCreateNotePayload
import com.equisoft.connect.sdk.models.InternalNotesCreateNoteResponse
import com.equisoft.connect.sdk.models.InternalNotesHistoryType
import com.equisoft.connect.sdk.models.InternalNotesNoteList
import com.equisoft.connect.sdk.models.InternalNotesPatchNotePayload
import com.equisoft.connect.sdk.models.InternalNotesPatchNoteResponse
import com.equisoft.connect.sdk.models.TasksCreateTaskPayload
import com.equisoft.connect.sdk.models.TasksCreateTaskResponse
import com.equisoft.connect.sdk.models.TasksDueDateFilter
import com.equisoft.connect.sdk.models.TasksListTaskResponse
import com.equisoft.connect.sdk.models.TasksOrderByType
import com.equisoft.connect.sdk.models.TasksPatchTaskPayload
import com.equisoft.connect.sdk.models.TasksPatchTaskResponse
import com.equisoft.connect.sdk.models.TasksTask
import com.equisoft.connect.sdk.models.TasksTransferToCompletedResponse

import com.squareup.moshi.Json

import com.equisoft.connect.sdk.infrastructure.ApiClient
import com.equisoft.connect.sdk.infrastructure.ApiResponse
import com.equisoft.connect.sdk.infrastructure.ClientException
import com.equisoft.connect.sdk.infrastructure.ClientError
import com.equisoft.connect.sdk.infrastructure.ServerException
import com.equisoft.connect.sdk.infrastructure.ServerError
import com.equisoft.connect.sdk.infrastructure.MultiValueMap
import com.equisoft.connect.sdk.infrastructure.PartConfig
import com.equisoft.connect.sdk.infrastructure.RequestConfig
import com.equisoft.connect.sdk.infrastructure.RequestMethod
import com.equisoft.connect.sdk.infrastructure.ResponseType
import com.equisoft.connect.sdk.infrastructure.Success
import com.equisoft.connect.sdk.infrastructure.toMultiValue

class TasksApi(
    basePath: kotlin.String = defaultBasePath,
    accessToken: String? = null,
    client: OkHttpClient = ApiClient.defaultClient
) : ApiClient(basePath, accessToken) {

    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Archive an internal note for a task.
     * 
     * @param taskId Task unique identifier.
     * @param noteId Note unique identifier.
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun archiveTaskInternalNote(taskId: kotlin.String, noteId: kotlin.Int, acceptLanguage: kotlin.String? = null) : kotlin.Any {
        val localVarResponse = archiveTaskInternalNoteWithHttpInfo(taskId = taskId, noteId = noteId, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Archive an internal note for a task.
     * 
     * @param taskId Task unique identifier.
     * @param noteId Note unique identifier.
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun archiveTaskInternalNoteWithHttpInfo(taskId: kotlin.String, noteId: kotlin.Int, acceptLanguage: kotlin.String?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = archiveTaskInternalNoteRequestConfig(taskId = taskId, noteId = noteId, acceptLanguage = acceptLanguage)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation archiveTaskInternalNote
     *
     * @param taskId Task unique identifier.
     * @param noteId Note unique identifier.
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return RequestConfig
     */
    fun archiveTaskInternalNoteRequestConfig(taskId: kotlin.String, noteId: kotlin.Int, acceptLanguage: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/crm/api/v1/tasks/{taskId}/notes/{noteId}/archive".replace("{"+"taskId"+"}", "$taskId").replace("{"+"noteId"+"}", "$noteId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Create a task.
     * 
     * @param tasksCreateTaskPayload 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return TasksCreateTaskResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTask(tasksCreateTaskPayload: TasksCreateTaskPayload, acceptLanguage: kotlin.String? = null) : TasksCreateTaskResponse {
        val localVarResponse = createTaskWithHttpInfo(tasksCreateTaskPayload = tasksCreateTaskPayload, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TasksCreateTaskResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a task.
     * 
     * @param tasksCreateTaskPayload 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return ApiResponse<TasksCreateTaskResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createTaskWithHttpInfo(tasksCreateTaskPayload: TasksCreateTaskPayload, acceptLanguage: kotlin.String?) : ApiResponse<TasksCreateTaskResponse?> {
        val localVariableConfig = createTaskRequestConfig(tasksCreateTaskPayload = tasksCreateTaskPayload, acceptLanguage = acceptLanguage)

        return request<TasksCreateTaskPayload, TasksCreateTaskResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTask
     *
     * @param tasksCreateTaskPayload 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return RequestConfig
     */
    fun createTaskRequestConfig(tasksCreateTaskPayload: TasksCreateTaskPayload, acceptLanguage: kotlin.String?) : RequestConfig<TasksCreateTaskPayload> {
        val localVariableBody = tasksCreateTaskPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/crm/api/v1/tasks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Add an internal note to a task.
     * 
     * @param taskId Task unique identifier.
     * @param internalNotesCreateNotePayload 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return InternalNotesCreateNoteResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTaskInternalNote(taskId: kotlin.String, internalNotesCreateNotePayload: InternalNotesCreateNotePayload, acceptLanguage: kotlin.String? = null) : InternalNotesCreateNoteResponse {
        val localVarResponse = createTaskInternalNoteWithHttpInfo(taskId = taskId, internalNotesCreateNotePayload = internalNotesCreateNotePayload, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InternalNotesCreateNoteResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add an internal note to a task.
     * 
     * @param taskId Task unique identifier.
     * @param internalNotesCreateNotePayload 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return ApiResponse<InternalNotesCreateNoteResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createTaskInternalNoteWithHttpInfo(taskId: kotlin.String, internalNotesCreateNotePayload: InternalNotesCreateNotePayload, acceptLanguage: kotlin.String?) : ApiResponse<InternalNotesCreateNoteResponse?> {
        val localVariableConfig = createTaskInternalNoteRequestConfig(taskId = taskId, internalNotesCreateNotePayload = internalNotesCreateNotePayload, acceptLanguage = acceptLanguage)

        return request<InternalNotesCreateNotePayload, InternalNotesCreateNoteResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTaskInternalNote
     *
     * @param taskId Task unique identifier.
     * @param internalNotesCreateNotePayload 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return RequestConfig
     */
    fun createTaskInternalNoteRequestConfig(taskId: kotlin.String, internalNotesCreateNotePayload: InternalNotesCreateNotePayload, acceptLanguage: kotlin.String?) : RequestConfig<InternalNotesCreateNotePayload> {
        val localVariableBody = internalNotesCreateNotePayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/crm/api/v1/tasks/{taskId}/notes".replace("{"+"taskId"+"}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete a task.
     * 
     * @param taskId 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteTask(taskId: kotlin.String) : kotlin.Any {
        val localVarResponse = deleteTaskWithHttpInfo(taskId = taskId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a task.
     * 
     * @param taskId 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTaskWithHttpInfo(taskId: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = deleteTaskRequestConfig(taskId = taskId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteTask
     *
     * @param taskId 
     * @return RequestConfig
     */
    fun deleteTaskRequestConfig(taskId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/crm/api/v1/tasks/{taskId}".replace("{"+"taskId"+"}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Return the detail of a task.
     * 
     * @param taskId 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return TasksTask
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTask(taskId: kotlin.String, acceptLanguage: kotlin.String? = null) : TasksTask {
        val localVarResponse = getTaskWithHttpInfo(taskId = taskId, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TasksTask
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Return the detail of a task.
     * 
     * @param taskId 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return ApiResponse<TasksTask?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTaskWithHttpInfo(taskId: kotlin.String, acceptLanguage: kotlin.String?) : ApiResponse<TasksTask?> {
        val localVariableConfig = getTaskRequestConfig(taskId = taskId, acceptLanguage = acceptLanguage)

        return request<Unit, TasksTask>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTask
     *
     * @param taskId 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return RequestConfig
     */
    fun getTaskRequestConfig(taskId: kotlin.String, acceptLanguage: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/tasks/{taskId}".replace("{"+"taskId"+"}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the internal notes list for a task.
     * 
     * @param taskId 
     * @param history Query all revisions or not. (optional)
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return InternalNotesNoteList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTaskInternalNoteList(taskId: kotlin.String, history: InternalNotesHistoryType? = null, acceptLanguage: kotlin.String? = null) : InternalNotesNoteList {
        val localVarResponse = getTaskInternalNoteListWithHttpInfo(taskId = taskId, history = history, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InternalNotesNoteList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get the internal notes list for a task.
     * 
     * @param taskId 
     * @param history Query all revisions or not. (optional)
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return ApiResponse<InternalNotesNoteList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTaskInternalNoteListWithHttpInfo(taskId: kotlin.String, history: InternalNotesHistoryType?, acceptLanguage: kotlin.String?) : ApiResponse<InternalNotesNoteList?> {
        val localVariableConfig = getTaskInternalNoteListRequestConfig(taskId = taskId, history = history, acceptLanguage = acceptLanguage)

        return request<Unit, InternalNotesNoteList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTaskInternalNoteList
     *
     * @param taskId 
     * @param history Query all revisions or not. (optional)
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return RequestConfig
     */
    fun getTaskInternalNoteListRequestConfig(taskId: kotlin.String, history: InternalNotesHistoryType?, acceptLanguage: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (history != null) {
                    put("history", listOf(history.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/tasks/{taskId}/notes".replace("{"+"taskId"+"}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List or search tasks.
     * 
     * @param ownerId Owner ID filter param. (optional)
     * @param contactIds Contact ID filter param. Many ids can be passed to this argument separated by coma. Ex: &#39;?contactId&#x3D;1,2,3&#39;. Any of the given contacts will be returned in the result. (optional)
     * @param minDueDate Minimum (inclusive) due date of the task. (optional)
     * @param maxDueDate Maximum (exclusive) due date of the task. (optional)
     * @param isCompleted If true, include only completed tasks. If false, include only TODO tasks. If not set or null, include both. (optional)
     * @param dueDateFilter Include or exclude tasks with or without due date. (optional)
     * @param orderBy Specify the order of the results. (optional)
     * @param pageToken Token to specify which page to fetch. (optional)
     * @param maxResults Maximum number of records for one result page.  If the query return more records, nextPageToken will be specified in the result to get the records of the next page. Defaults to 250 records. Can never be more than 2500 records. (optional)
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return TasksListTaskResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listTasks(ownerId: kotlin.String? = null, contactIds: kotlin.collections.List<kotlin.Int>? = null, minDueDate: java.time.LocalDate? = null, maxDueDate: java.time.LocalDate? = null, isCompleted: kotlin.Boolean? = null, dueDateFilter: TasksDueDateFilter? = null, orderBy: TasksOrderByType? = null, pageToken: kotlin.String? = null, maxResults: kotlin.String? = null, acceptLanguage: kotlin.String? = null) : TasksListTaskResponse {
        val localVarResponse = listTasksWithHttpInfo(ownerId = ownerId, contactIds = contactIds, minDueDate = minDueDate, maxDueDate = maxDueDate, isCompleted = isCompleted, dueDateFilter = dueDateFilter, orderBy = orderBy, pageToken = pageToken, maxResults = maxResults, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TasksListTaskResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List or search tasks.
     * 
     * @param ownerId Owner ID filter param. (optional)
     * @param contactIds Contact ID filter param. Many ids can be passed to this argument separated by coma. Ex: &#39;?contactId&#x3D;1,2,3&#39;. Any of the given contacts will be returned in the result. (optional)
     * @param minDueDate Minimum (inclusive) due date of the task. (optional)
     * @param maxDueDate Maximum (exclusive) due date of the task. (optional)
     * @param isCompleted If true, include only completed tasks. If false, include only TODO tasks. If not set or null, include both. (optional)
     * @param dueDateFilter Include or exclude tasks with or without due date. (optional)
     * @param orderBy Specify the order of the results. (optional)
     * @param pageToken Token to specify which page to fetch. (optional)
     * @param maxResults Maximum number of records for one result page.  If the query return more records, nextPageToken will be specified in the result to get the records of the next page. Defaults to 250 records. Can never be more than 2500 records. (optional)
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return ApiResponse<TasksListTaskResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listTasksWithHttpInfo(ownerId: kotlin.String?, contactIds: kotlin.collections.List<kotlin.Int>?, minDueDate: java.time.LocalDate?, maxDueDate: java.time.LocalDate?, isCompleted: kotlin.Boolean?, dueDateFilter: TasksDueDateFilter?, orderBy: TasksOrderByType?, pageToken: kotlin.String?, maxResults: kotlin.String?, acceptLanguage: kotlin.String?) : ApiResponse<TasksListTaskResponse?> {
        val localVariableConfig = listTasksRequestConfig(ownerId = ownerId, contactIds = contactIds, minDueDate = minDueDate, maxDueDate = maxDueDate, isCompleted = isCompleted, dueDateFilter = dueDateFilter, orderBy = orderBy, pageToken = pageToken, maxResults = maxResults, acceptLanguage = acceptLanguage)

        return request<Unit, TasksListTaskResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listTasks
     *
     * @param ownerId Owner ID filter param. (optional)
     * @param contactIds Contact ID filter param. Many ids can be passed to this argument separated by coma. Ex: &#39;?contactId&#x3D;1,2,3&#39;. Any of the given contacts will be returned in the result. (optional)
     * @param minDueDate Minimum (inclusive) due date of the task. (optional)
     * @param maxDueDate Maximum (exclusive) due date of the task. (optional)
     * @param isCompleted If true, include only completed tasks. If false, include only TODO tasks. If not set or null, include both. (optional)
     * @param dueDateFilter Include or exclude tasks with or without due date. (optional)
     * @param orderBy Specify the order of the results. (optional)
     * @param pageToken Token to specify which page to fetch. (optional)
     * @param maxResults Maximum number of records for one result page.  If the query return more records, nextPageToken will be specified in the result to get the records of the next page. Defaults to 250 records. Can never be more than 2500 records. (optional)
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return RequestConfig
     */
    fun listTasksRequestConfig(ownerId: kotlin.String?, contactIds: kotlin.collections.List<kotlin.Int>?, minDueDate: java.time.LocalDate?, maxDueDate: java.time.LocalDate?, isCompleted: kotlin.Boolean?, dueDateFilter: TasksDueDateFilter?, orderBy: TasksOrderByType?, pageToken: kotlin.String?, maxResults: kotlin.String?, acceptLanguage: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (ownerId != null) {
                    put("ownerId", listOf(ownerId.toString()))
                }
                if (contactIds != null) {
                    put("contactIds", toMultiValue(contactIds.toList(), "multi"))
                }
                if (minDueDate != null) {
                    put("minDueDate", listOf(parseDateToQueryString(minDueDate)))
                }
                if (maxDueDate != null) {
                    put("maxDueDate", listOf(parseDateToQueryString(maxDueDate)))
                }
                if (isCompleted != null) {
                    put("isCompleted", listOf(isCompleted.toString()))
                }
                if (dueDateFilter != null) {
                    put("dueDateFilter", listOf(dueDateFilter.toString()))
                }
                if (orderBy != null) {
                    put("orderBy", listOf(orderBy.toString()))
                }
                if (pageToken != null) {
                    put("pageToken", listOf(pageToken.toString()))
                }
                if (maxResults != null) {
                    put("maxResults", listOf(maxResults.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/crm/api/v1/tasks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Partially update a task.
     * 
     * @param taskId Task unique identifier.
     * @param tasksPatchTaskPayload Event fields to update. The body of the patch request includes only the resource fields you want to modify. To delete a field, set it to null. Collections are always overridden if defined.
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return TasksPatchTaskResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun patchTask(taskId: kotlin.String, tasksPatchTaskPayload: TasksPatchTaskPayload, acceptLanguage: kotlin.String? = null) : TasksPatchTaskResponse {
        val localVarResponse = patchTaskWithHttpInfo(taskId = taskId, tasksPatchTaskPayload = tasksPatchTaskPayload, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TasksPatchTaskResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Partially update a task.
     * 
     * @param taskId Task unique identifier.
     * @param tasksPatchTaskPayload Event fields to update. The body of the patch request includes only the resource fields you want to modify. To delete a field, set it to null. Collections are always overridden if defined.
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return ApiResponse<TasksPatchTaskResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun patchTaskWithHttpInfo(taskId: kotlin.String, tasksPatchTaskPayload: TasksPatchTaskPayload, acceptLanguage: kotlin.String?) : ApiResponse<TasksPatchTaskResponse?> {
        val localVariableConfig = patchTaskRequestConfig(taskId = taskId, tasksPatchTaskPayload = tasksPatchTaskPayload, acceptLanguage = acceptLanguage)

        return request<TasksPatchTaskPayload, TasksPatchTaskResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchTask
     *
     * @param taskId Task unique identifier.
     * @param tasksPatchTaskPayload Event fields to update. The body of the patch request includes only the resource fields you want to modify. To delete a field, set it to null. Collections are always overridden if defined.
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return RequestConfig
     */
    fun patchTaskRequestConfig(taskId: kotlin.String, tasksPatchTaskPayload: TasksPatchTaskPayload, acceptLanguage: kotlin.String?) : RequestConfig<TasksPatchTaskPayload> {
        val localVariableBody = tasksPatchTaskPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/crm/api/v1/tasks/{taskId}".replace("{"+"taskId"+"}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Add an internal note to a task.
     * 
     * @param taskId Task unique identifier.
     * @param noteId Note unique identifier.
     * @param internalNotesPatchNotePayload 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return InternalNotesPatchNoteResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun patchTaskInternalNote(taskId: kotlin.String, noteId: kotlin.Int, internalNotesPatchNotePayload: InternalNotesPatchNotePayload, acceptLanguage: kotlin.String? = null) : InternalNotesPatchNoteResponse {
        val localVarResponse = patchTaskInternalNoteWithHttpInfo(taskId = taskId, noteId = noteId, internalNotesPatchNotePayload = internalNotesPatchNotePayload, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InternalNotesPatchNoteResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add an internal note to a task.
     * 
     * @param taskId Task unique identifier.
     * @param noteId Note unique identifier.
     * @param internalNotesPatchNotePayload 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return ApiResponse<InternalNotesPatchNoteResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun patchTaskInternalNoteWithHttpInfo(taskId: kotlin.String, noteId: kotlin.Int, internalNotesPatchNotePayload: InternalNotesPatchNotePayload, acceptLanguage: kotlin.String?) : ApiResponse<InternalNotesPatchNoteResponse?> {
        val localVariableConfig = patchTaskInternalNoteRequestConfig(taskId = taskId, noteId = noteId, internalNotesPatchNotePayload = internalNotesPatchNotePayload, acceptLanguage = acceptLanguage)

        return request<InternalNotesPatchNotePayload, InternalNotesPatchNoteResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchTaskInternalNote
     *
     * @param taskId Task unique identifier.
     * @param noteId Note unique identifier.
     * @param internalNotesPatchNotePayload 
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return RequestConfig
     */
    fun patchTaskInternalNoteRequestConfig(taskId: kotlin.String, noteId: kotlin.Int, internalNotesPatchNotePayload: InternalNotesPatchNotePayload, acceptLanguage: kotlin.String?) : RequestConfig<InternalNotesPatchNotePayload> {
        val localVariableBody = internalNotesPatchNotePayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/crm/api/v1/tasks/{taskId}/notes/{noteId}".replace("{"+"taskId"+"}", "$taskId").replace("{"+"noteId"+"}", "$noteId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Restore an archived internal note for a task.
     * 
     * @param taskId Task unique identifier.
     * @param noteId Note unique identifier.
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun restoreTaskInternalNote(taskId: kotlin.String, noteId: kotlin.Int, acceptLanguage: kotlin.String? = null) : kotlin.Any {
        val localVarResponse = restoreTaskInternalNoteWithHttpInfo(taskId = taskId, noteId = noteId, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Restore an archived internal note for a task.
     * 
     * @param taskId Task unique identifier.
     * @param noteId Note unique identifier.
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun restoreTaskInternalNoteWithHttpInfo(taskId: kotlin.String, noteId: kotlin.Int, acceptLanguage: kotlin.String?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = restoreTaskInternalNoteRequestConfig(taskId = taskId, noteId = noteId, acceptLanguage = acceptLanguage)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation restoreTaskInternalNote
     *
     * @param taskId Task unique identifier.
     * @param noteId Note unique identifier.
     * @param acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282 (optional)
     * @return RequestConfig
     */
    fun restoreTaskInternalNoteRequestConfig(taskId: kotlin.String, noteId: kotlin.Int, acceptLanguage: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/crm/api/v1/tasks/{taskId}/notes/{noteId}/restore".replace("{"+"taskId"+"}", "$taskId").replace("{"+"noteId"+"}", "$noteId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Transfer a task to completed/done.
     * 
     * @param taskId Task unique identifier.
     * @return TasksTransferToCompletedResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun transferTaskToCompleted(taskId: kotlin.String) : TasksTransferToCompletedResponse {
        val localVarResponse = transferTaskToCompletedWithHttpInfo(taskId = taskId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TasksTransferToCompletedResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Transfer a task to completed/done.
     * 
     * @param taskId Task unique identifier.
     * @return ApiResponse<TasksTransferToCompletedResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun transferTaskToCompletedWithHttpInfo(taskId: kotlin.String) : ApiResponse<TasksTransferToCompletedResponse?> {
        val localVariableConfig = transferTaskToCompletedRequestConfig(taskId = taskId)

        return request<Unit, TasksTransferToCompletedResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation transferTaskToCompleted
     *
     * @param taskId Task unique identifier.
     * @return RequestConfig
     */
    fun transferTaskToCompletedRequestConfig(taskId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/crm/api/v1/tasks/{taskId}/transferToCompleted".replace("{"+"taskId"+"}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
